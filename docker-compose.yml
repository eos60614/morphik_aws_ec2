version: '3.8'

x-ollama-check: &ollama-check
  command: >
    /bin/sh -c '
    grep -q "provider *= *\"ollama\"" morphik.toml &&
    echo "true" > /tmp/needs_ollama ||
    echo "false" > /tmp/needs_ollama'

services:
  config-check:
    image: alpine
    volumes:
      - ./morphik.toml:/morphik.toml
    <<: *ollama-check

  morphik:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    runtime: nvidia
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          cpus: '4.0'          # ALL CPU cores
          memory: 12G          # Most of the RAM
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - POSTGRES_URI=postgresql+asyncpg://morphik:morphik@postgres:5432/morphik
      - PGPASSWORD=morphik
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=DEBUG
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
      - TOKENIZERS_PARALLELISM=true
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
      - ./morphik.toml:/app/morphik.toml
      - huggingface_cache:/root/.cache/huggingface
      - /tmp:/tmp  # Use instance store for temp files
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      config-check:
        condition: service_completed_successfully
      ollama:
        condition: service_started
        required: false
    networks:
      - morphik-network
    env_file:
      - .env

  worker:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    runtime: nvidia
    command: arq core.workers.ingestion_worker.WorkerSettings
    deploy:
      resources:
        limits:
          cpus: '3.5'          # Most CPU cores
          memory: 8G           # Generous RAM
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - POSTGRES_URI=postgresql+asyncpg://morphik:morphik@postgres:5432/morphik
      - PGPASSWORD=morphik
      - LOG_LEVEL=DEBUG
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      - OMP_NUM_THREADS=3
      - MKL_NUM_THREADS=3
      - TOKENIZERS_PARALLELISM=true
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
      - ./morphik.toml:/app/morphik.toml
      - huggingface_cache:/root/.cache/huggingface
      - /tmp:/tmp  # Use instance store for temp files
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      config-check:
        condition: service_completed_successfully
      ollama:
        condition: service_started
        required: false
    networks:
      - morphik-network
    env_file:
      - .env

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 800mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - morphik-network

  postgres:
    build:
      context: .
      dockerfile: postgres.dockerfile
    shm_size: 256mb  # Increased shared memory
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
    environment:
      - POSTGRES_USER=morphik
      - POSTGRES_PASSWORD=morphik
      - POSTGRES_DB=morphik
      - PGDATA=/var/lib/postgresql/data/pgdata
      # PostgreSQL performance tuning
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U morphik -d morphik"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - morphik-network
    command: >
      postgres
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  ollama:
    image: ollama/ollama:latest
    runtime: nvidia
    profiles:
      - ollama
    ports:
      - "11434:11434"
    deploy:
      resources:
        limits:
          cpus: '4.0'          # ALL CPU cores when active
          memory: 10G          # Large memory for big models
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS="*"
      - OLLAMA_MAX_LOADED_MODELS=2  # Can load multiple models
    volumes:
      - ollama_data:/root/.ollama
      - ./ollama-entrypoint.sh:/ollama-entrypoint.sh
      - /tmp:/tmp  # Use instance store for temp
    networks:
      - morphik-network
    entrypoint: ["/ollama-entrypoint.sh"]

networks:
  morphik-network:
    driver: bridge

volumes:
  postgres_data:
  ollama_data:
  huggingface_cache:
  redis_data: